buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_1_8

        junitVersion = "5.7.1"
        kotlinVersion = "1.4.30"
        jedisVersion = "3.5.2"
        mockkVersion = "1.11.0"
        kluentVersion = "1.4"
        testContainersVersion = "1.15.2"
        msgpackVersion = "0.8.22"
        dokkaVersion = "1.4.30"
        gradleNexusVersion = "1.0.0"
    }

    repositories {
        gradlePluginPortal()
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'signing'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "io.github.gradle-nexus.publish-plugin" version "$gradleNexusVersion"
}

repositories {
    mavenCentral()
    jcenter()
}

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "redis.clients:jedis:$jedisVersion"

    implementation "org.msgpack:msgpack-core:$msgpackVersion"

    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
}

dokkaHtml {
    outputDirectory.set(javadoc.destinationDir)
    dokkaSourceSets {
        named("main") {
            jdkVersion.set(javaVersion)
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/SmartsquareGmbH/socket-io-redis-emitter/blob/master/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }
        }
    }
}

tasks.withType(Javadoc).all {
    it.dependsOn dokkaHtml
}

group = "de.smartsquare"
version = System.getenv("GITHUB_VERSION") ?: "1.0.0-SNAPSHOT"
description = "Library to emit socket.io notifications via redis."

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
}

jar {
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'socket-io-redis-emitter'

            from components.java

            pom {
                name = 'Socket-io-Redis-Emitter'
                description = 'Library to emit socket.io notifications via redis.'
                url = 'https://github.com/SmartsquareGmbH/socket-io-redis-emitter'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'deen13'
                        name = 'Dennis Dierkes'
                        email = 'dierkes@smartsquare.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/SmartsquareGmbH/socket-io-redis-emitter.git'
                    developerConnection = 'scm:git:ssh://github.com/SmartsquareGmbH/socket-io-redis-emitter.git'
                    url = 'https://github.com/SmartsquareGmbH/socket-io-redis-emitter'
                }
                organization {
                    name = 'Smartsquare GmbH'
                    url = 'https://github.com/SmartsquareGmbH'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/SmartsquareGmbH/socket-io-redis-emitter/issues'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.findProperty("gpr.ossrhUser") ?: System.getenv("OSSRHUSER")
            password = project.findProperty("gpr.ossrhPassword") ?: System.getenv("OSSRHPASSWORD")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey") ?: System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = findProperty("signingPassword") ?: System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_1_8
        gradleVersion = "7.0.2"

        junitVersion = "5.7.2"
        kotlinVersion = "1.5.10"
        detektVersion = "1.17.1"
        ktlintVersion = "10.1.0"
        jedisVersion = "3.6.1"
        mockkVersion = "1.11.0"
        kluentVersion = "1.66"
        msgpackVersion = "0.9.0"
        jsonAssertVersion = "1.5.0"
        dokkaVersion = "1.4.32"
        gradleNexusVersion = "1.1.0"
        gradleVersionsVersion = "0.39.0"
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id "signing"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id "io.github.gradle-nexus.publish-plugin" version "$gradleNexusVersion"
    id "com.github.ben-manes.versions" version "$gradleVersionsVersion"
}

group = "de.smartsquare"
version = System.getenv("GITHUB_VERSION") ?: "1.0.0-SNAPSHOT"
description = "Library to emit socket.io notifications via redis."

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    api "redis.clients:jedis:$jedisVersion"

    implementation "org.msgpack:msgpack-core:$msgpackVersion"

    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.skyscreamer:jsonassert:$jsonAssertVersion"
}

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    withJavadocJar()
    withSourcesJar()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaVersion.toString()
        allWarningsAsErrors = true
    }
}

detekt {
    config = files("${project.rootDir}/detekt.yml")

    buildUponDefaultConfig = true
}

ktlint {
    outputToConsole = true
}

dokkaHtml {
    outputDirectory.set(javadoc.destinationDir)

    dokkaSourceSets {
        named("main") {
            jdkVersion.set(javaVersion)
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/SmartsquareGmbH/socket-io-redis-emitter/blob/master/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }
        }
    }
}

tasks.withType(Javadoc).all {
    it.dependsOn dokkaHtml
}

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

static def isNonStable(String version) {
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/

    return !stableKeyword && !(version ==~ regex)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "socket-io-redis-emitter"

            from components.java

            pom {
                name = "Socket-io-Redis-Emitter"
                description = "Library to emit socket.io notifications via redis."
                url = "https://github.com/SmartsquareGmbH/socket-io-redis-emitter"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "deen13"
                        name = "Dennis Dierkes"
                        email = "dierkes@smartsquare.de"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/SmartsquareGmbH/socket-io-redis-emitter.git"
                    developerConnection = "scm:git:ssh://github.com/SmartsquareGmbH/socket-io-redis-emitter.git"
                    url = "https://github.com/SmartsquareGmbH/socket-io-redis-emitter"
                }
                organization {
                    name = "Smartsquare GmbH"
                    url = "https://github.com/SmartsquareGmbH"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/SmartsquareGmbH/socket-io-redis-emitter/issues"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.findProperty("gpr.ossrhUser") ?: System.getenv("OSSRHUSER")
            password = project.findProperty("gpr.ossrhPassword") ?: System.getenv("OSSRHPASSWORD")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey") ?: System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = findProperty("signingPassword") ?: System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}
